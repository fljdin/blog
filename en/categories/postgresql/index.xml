<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Postgresql on Discovery notebook</title><link>https://fljd.in/en/categories/postgresql/</link><description>Recent content in Postgresql on Discovery notebook</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Florent Jardin</managingEditor><lastBuildDate>Thu, 19 Sep 2024 13:20:00 +0200</lastBuildDate><atom:link href="https://fljd.in/en/categories/postgresql/index.xml" rel="self" type="application/rss+xml"/><item><title>Hierarchical data types</title><link>https://fljd.in/en/2024/09/19/hierarchical-data-types/</link><pubDate>Thu, 19 Sep 2024 13:20:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/en/2024/09/19/hierarchical-data-types/</guid><description>&lt;p>The SQL standard defines a set of rules so that database systems can be interchangeable,
but there are small singularities in the wild. In this regard, the &lt;code>hierarchyid&lt;/code> data type
provided by SQL Server is a striking example. If you are switching to PostgreSQL, two
solutions are available to you.&lt;/p>
&lt;p>A first and simpler solution consists in linking each node to its parent using a new
&lt;code>parentid&lt;/code> column and applying a foreign key constraint. Another, more complete approach
consists in using the &lt;code>ltree&lt;/code> extension. This article deals with the latter case.&lt;/p></description></item><item><title>How to keep a community alive</title><link>https://fljd.in/en/2024/07/30/how-to-keep-a-community-alive/</link><pubDate>Tue, 30 Jul 2024 09:30:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/en/2024/07/30/how-to-keep-a-community-alive/</guid><description>&lt;p>The &lt;a href="https://pgday.fr/" target="_blank" rel="noopener">PG Day France&lt;/a> took place on June 11th and 12th in Lille, my hometown.
It is the event of the French PostgreSQL community that settles in a different city each year.
The opportunity was too good for me and I met many people from all over France and its surroundings,
to discuss PostgreSQL during two days of workshops and conferences.&lt;/p>
&lt;p>For this edition, I had the pleasure of speaking and sharing my experience on the animation of
the local Meetup group that I took over four years ago. In this article, I want to write down the
main points discussed during this presentation, while waiting for the video of the conference to be
posted online.&lt;/p></description></item><item><title>An assistant to copy data from a remote server</title><link>https://fljd.in/en/2024/05/28/an-assistant-to-copy-data-from-a-remote-server/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/en/2024/05/28/an-assistant-to-copy-data-from-a-remote-server/</guid><description>&lt;p>During the last PGSession organized by Dalibo, I wrote and led a &lt;a href="https://dali.bo/wsfdw_html" target="_blank" rel="noopener">workshop&lt;/a>
(french) on the migration to PostgreSQL using Foreign Data Wrappers, or FDW.
This was an opportunity to present to the general public the &lt;a href="https://github.com/cybertec-postgresql/db_migrator" target="_blank" rel="noopener">&lt;code>db_migrator&lt;/code>&lt;/a>
extension for which I wrote an &lt;a href="https://fljd.in/en/2023/07/28/on-the-road-to-freedom-with-db_migrator/">article&lt;/a> on this blog.&lt;/p>
&lt;p>While working on this workshop, we noticed that copying data with the
&lt;code>db_migrator&lt;/code> extension is not perfectly supported. Indeed, although there is a
low-level function to distribute the transfer table by table over several
processes, many situations will require writing a large number of SQL queries to
get out of trouble. Over the following months, I worked on the design of an
&lt;a href="https://github.com/fljdin/fdw-assistant" target="_blank" rel="noopener">assistant&lt;/a> written in PL/pgSQL whose purpose is to simplify the generation
of these queries.&lt;/p></description></item><item><title>Transfer modes in a migration</title><link>https://fljd.in/en/2023/11/11/transfer-modes-in-a-migration/</link><pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/en/2023/11/11/transfer-modes-in-a-migration/</guid><description>&lt;p>In computer science, a migration project involves changing one or more technical
components without impacting any application behaviors. In the realm of
databases (and the profession I practice), it will involve choosing a new system
(such as PostgreSQL) to replace another (such as Oracle or Microsoft SQL
Server).&lt;/p>
&lt;p>In a &lt;a href="https://fljd.in/2021/12/06/migrer-vers-postgresql/">previous article&lt;/a> (French), I described exhaustive steps to perform a
complete migration using Foreign Data Wrappers technology. However, the critical
data transfer step described there does not suit all situations. Let&amp;rsquo;s explore
together the alternatives that cover a large portion of the needs.&lt;/p></description></item><item><title>On the road to freedom with db_migrator</title><link>https://fljd.in/en/2023/07/28/on-the-road-to-freedom-with-db_migrator/</link><pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/en/2023/07/28/on-the-road-to-freedom-with-db_migrator/</guid><description>&lt;p>Over the past months, I have spent several weeks contributing to the
&lt;a href="https://github.com/cybertec-postgresql/db_migrator" target="_blank" rel="noopener">db_migrator&lt;/a> extension. Written solely in PL/pgSQL, it enables the migration of
schemas and data from a database system to PostgreSQL using the external data I
had presented &lt;a href="https://fljd-in.translate.goog/2021/07/16/parlons-un-peu-des-donnees-externes/?_x_tr_sl=fr&amp;amp;_x_tr_tl=en&amp;amp;_x_tr_hl=fr&amp;amp;_x_tr_pto=wapp" target="_blank" rel="noopener">few years ago&lt;/a>.&lt;/p>
&lt;p>In this post, I present the functionality of the tool, its philosophy, and
the reason I found for its existence, even though it joins the ecosystem of
well-established open-source projects in the migration landscape. How does it
compare to &lt;a href="https://ora2pg.darold.net/" target="_blank" rel="noopener">Ora2Pg&lt;/a> or &lt;a href="https://pgloader.io/" target="_blank" rel="noopener">pgloader&lt;/a> in terms of value and capabilities?&lt;/p></description></item></channel></rss>