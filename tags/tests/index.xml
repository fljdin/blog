<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tests on Carnet de découvertes</title><link>https://fljd.in/tags/tests/</link><description>Recent content in Tests on Carnet de découvertes</description><generator>Hugo -- gohugo.io</generator><language>fr</language><managingEditor>Florent Jardin</managingEditor><lastBuildDate>Thu, 21 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fljd.in/tags/tests/index.xml" rel="self" type="application/rss+xml"/><item><title>Halte aux régressions</title><link>https://fljd.in/2022/04/21/halte-aux-regressions/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2022/04/21/halte-aux-regressions/</guid><description>&lt;p>Pour garantir la qualité du code d&amp;rsquo;un logiciel, rien de mieux que la validation
par les tests. Ces derniers peuvent être de différentes natures (fonctionnels,
intégration, unitaires, performance, etc.) et permettent de respecter une série
d&amp;rsquo;exigences que s&amp;rsquo;imposent les développeurs pour maintenir et faire évoluer ledit
logiciel dans la bonne direction.&lt;/p>
&lt;p>Dans cet article, je souhaite explorer le système de tests tel qu&amp;rsquo;il est (et
a été) implémenté dans PostgreSQL et comment le réemployer dans la rédaction d&amp;rsquo;une
extension communautaire. Si vous ne connaissiez pas l&amp;rsquo;outil &lt;code>pg_regress&lt;/code>, il
n&amp;rsquo;aura plus de secret pour vous !&lt;/p></description></item><item><title>Écrire ses tests unitaires en SQL</title><link>https://fljd.in/2020/05/14/ecrire-ses-tests-unitaires-en-sql/</link><pubDate>Thu, 14 May 2020 17:30:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2020/05/14/ecrire-ses-tests-unitaires-en-sql/</guid><description>&lt;p>Je ne suis qu&amp;rsquo;un piètre développeur et je n&amp;rsquo;écris pas de tests unitaires. En
réalité, ce n&amp;rsquo;est ni ma spécialité ni mon cœur de métier. Et pourtant, ma
curiosité m&amp;rsquo;a mené à découvrir bien tardivement la mouvance &lt;a href="https://fr.wikipedia.org/wiki/Test_driven_development" target="_blank" rel="noopener">TDD&lt;/a> dans la
conception logicielle et la rigueur d&amp;rsquo;écrire chaque test avant l&amp;rsquo;implémentation
d&amp;rsquo;une fonctionnalité.&lt;/p>
&lt;p>Ce fut par hasard et avec grand étonnement, que je suis tombé sur l&amp;rsquo;extension
&lt;a href="https://pgtap.org/" target="_blank" rel="noopener">pgTAP&lt;/a> il y a plusieurs mois, et l&amp;rsquo;idée de la mettre en application sur une
instance PostgreSQL me hantait. Je vous propose dans cet article d&amp;rsquo;aborder ce
&lt;em>framework&lt;/em> de tests avec un cas d&amp;rsquo;usage amusant.&lt;/p></description></item><item><title>Jette ton instance à la poubelle</title><link>https://fljd.in/2019/06/20/jette-ton-instance-a-la-poubelle/</link><pubDate>Thu, 20 Jun 2019 13:00:00 +0100</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2019/06/20/jette-ton-instance-a-la-poubelle/</guid><description>&lt;p>À des fins de qualité ou de formation, il est très souvent nécessaire d&amp;rsquo;avoir
une instance PostgreSQL d&amp;rsquo;une version particulière sur un environnement non
critique, que l&amp;rsquo;on peut malmener à souhait et à l&amp;rsquo;infini. La communauté Debian
propose l&amp;rsquo;outil &lt;code>pg_virtualenv&lt;/code> (&lt;a href="https://manpages.debian.org/testing/postgresql-common/pg_virtualenv.1.en.html" target="_blank" rel="noopener">manpage&lt;/a>) pour démarrer
une instance jettable, tout à fait compatible avec des tests de régression ou
l&amp;rsquo;exécution de scripts lors d&amp;rsquo;une démonstration.&lt;/p></description></item></channel></rss>